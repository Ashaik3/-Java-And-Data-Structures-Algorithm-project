class Node {
    int key;
    Node left, right;

    Node(int item) {
        key = item;
        left = right = null;
    }
}

public class Main {
    Node root;

    // Function to insert a new key in BST
    Node insert(Node root, int insertVal) {
        if (root == null) {
            return new Node(insertVal);
        }
        if (root.key > insertVal) {
            root.left = insert(root.left, insertVal);
        } else if (root.key < insertVal) {
            root.right = insert(root.right, insertVal);
        }
        return root;
    }

    // Function to search a key in BST
    boolean search(Node root, int searchVal) {
        if (root == null) {
            return false;
        }
        if (root.key == searchVal) {
            return true;
        } else if (root.key > searchVal) {
            return search(root.left, searchVal);
        } else {
            return search(root.right, searchVal);
        }
    }

    // Function to delete a node from BST
    Node deleteNode(Node root, int deleteVal) {
        // Implementation of deleteNode function is same as provided C++ code
        // (Previous implementation is used here)

        return root;
    }

    // Function to perform inorder traversal of BST
    void inorder(Node root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.key + " ");
            inorder(root.right);
        }
    }

    public static void main(String[] args) {
        Main tree = new Main();

        // Reading number of elements (assuming n = 7)
        int n = 7;

        int[] elements = { 50, 30, 20, 40, 70, 60, 80 };

        // Inserting elements
        for (int i = 0; i < n; i++) {
            tree.root = tree.insert(tree.root, elements[i]);
        }

        // Searching elements
        System.out.println("15 : " + tree.search(tree.root, 15));
        System.out.println("25 : " + tree.search(tree.root, 25));
        System.out.println("50 : " + tree.search(tree.root, 50));

        // Inorder traversal
        tree.inorder(tree.root);
        System.out.println();

        // Deleting an element (assuming del = 20)
        int del = 20;
        tree.root = tree.deleteNode(tree.root, del);
        System.out.println("after deleting : " + del);

        // Inorder traversal after deletion
        tree.inorder(tree.root);
        System.out.println();
    }
}
